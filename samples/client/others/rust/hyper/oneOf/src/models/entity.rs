/*
 * ByRefOrValue
 *
 * This tests for a oneOf interface representation 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "attype")]
pub enum Entity {
    #[serde(rename="Bar")]
    Bar {
        #[serde(rename = "id")]
        id: String,
        #[serde(rename = "barPropA", skip_serializing_if = "Option::is_none")]
        bar_prop_a: Option<String>,
        #[serde(rename = "fooPropB", skip_serializing_if = "Option::is_none")]
        foo_prop_b: Option<String>,
        #[serde(rename = "foo", skip_serializing_if = "Option::is_none")]
        foo: Option<Box<crate::models::FooRefOrValue>>,
        /// Hyperlink reference
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        /// A URI to a JSON-Schema file that defines additional attributes and relationships
        #[serde(rename = "@schemaLocation", skip_serializing_if = "Option::is_none")]
        at_schema_location: Option<String>,
        /// When sub-classing, this defines the super-class
        #[serde(rename = "@baseType", skip_serializing_if = "Option::is_none")]
        at_base_type: Option<String>,
    },
    #[serde(rename="Bar_Create")]
    BarCreate {
        #[serde(rename = "barPropA", skip_serializing_if = "Option::is_none")]
        bar_prop_a: Option<String>,
        #[serde(rename = "fooPropB", skip_serializing_if = "Option::is_none")]
        foo_prop_b: Option<String>,
        #[serde(rename = "foo", skip_serializing_if = "Option::is_none")]
        foo: Option<Box<crate::models::FooRefOrValue>>,
        /// Hyperlink reference
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        /// unique identifier
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        /// A URI to a JSON-Schema file that defines additional attributes and relationships
        #[serde(rename = "@schemaLocation", skip_serializing_if = "Option::is_none")]
        at_schema_location: Option<String>,
        /// When sub-classing, this defines the super-class
        #[serde(rename = "@baseType", skip_serializing_if = "Option::is_none")]
        at_base_type: Option<String>,
    },
    #[serde(rename="Foo")]
    Foo {
        #[serde(rename = "fooPropA", skip_serializing_if = "Option::is_none")]
        foo_prop_a: Option<String>,
        #[serde(rename = "fooPropB", skip_serializing_if = "Option::is_none")]
        foo_prop_b: Option<String>,
        /// Hyperlink reference
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        /// unique identifier
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        /// A URI to a JSON-Schema file that defines additional attributes and relationships
        #[serde(rename = "@schemaLocation", skip_serializing_if = "Option::is_none")]
        at_schema_location: Option<String>,
        /// When sub-classing, this defines the super-class
        #[serde(rename = "@baseType", skip_serializing_if = "Option::is_none")]
        at_base_type: Option<String>,
    },
    #[serde(rename="Pasta")]
    Pasta {
        #[serde(rename = "vendor", skip_serializing_if = "Option::is_none")]
        vendor: Option<String>,
        /// Hyperlink reference
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        /// unique identifier
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        /// A URI to a JSON-Schema file that defines additional attributes and relationships
        #[serde(rename = "@schemaLocation", skip_serializing_if = "Option::is_none")]
        at_schema_location: Option<String>,
        /// When sub-classing, this defines the super-class
        #[serde(rename = "@baseType", skip_serializing_if = "Option::is_none")]
        at_base_type: Option<String>,
    },
    #[serde(rename="Pizza")]
    Pizza {
        #[serde(rename = "pizzaSize", skip_serializing_if = "Option::is_none")]
        pizza_size: Option<f32>,
        /// Hyperlink reference
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        /// unique identifier
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        /// A URI to a JSON-Schema file that defines additional attributes and relationships
        #[serde(rename = "@schemaLocation", skip_serializing_if = "Option::is_none")]
        at_schema_location: Option<String>,
        /// When sub-classing, this defines the super-class
        #[serde(rename = "@baseType", skip_serializing_if = "Option::is_none")]
        at_base_type: Option<String>,
    },
    #[serde(rename="PizzaSpeziale")]
    PizzaSpeziale {
        #[serde(rename = "toppings", skip_serializing_if = "Option::is_none")]
        toppings: Option<String>,
        /// Hyperlink reference
        #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
        href: Option<String>,
        /// unique identifier
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        /// A URI to a JSON-Schema file that defines additional attributes and relationships
        #[serde(rename = "@schemaLocation", skip_serializing_if = "Option::is_none")]
        at_schema_location: Option<String>,
        /// When sub-classing, this defines the super-class
        #[serde(rename = "@baseType", skip_serializing_if = "Option::is_none")]
        at_base_type: Option<String>,
    },
}

impl Default for Entity {
    fn default() -> Self {
        Self::Bar {
            id: Default::default(),
            bar_prop_a: Default::default(),
            foo_prop_b: Default::default(),
            foo: Default::default(),
            href: Default::default(),
            at_schema_location: Default::default(),
            at_base_type: Default::default(),
        }
    }
}




